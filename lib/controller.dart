import 'dart:async';
import 'dart:convert';

import 'package:get/get.dart';
import 'package:http/http.dart' as http;
import 'package:web_socket_client/web_socket_client.dart';

import 'modal.dart';

class OpenseaController extends GetxController {
  var isLoading = false.obs;
  var result = 9.obs;

  Rx<Autogenerated> openseaModel=Autogenerated().obs;

@override
  void onInit() {
  main();
    super.onInit();
  // fetchData();
  }

  Future main() async {
    isLoading(true);
    // Create a WebSocket client.
    final uri = Uri.parse('ws://5.189.167.181:5000/OnMarketWatch?id=e5bd36be-e7de-4598-9b3d-f08e772558cb');
    const backoff = ConstantBackoff(Duration(seconds: 1));
    final socket = WebSocket(uri,);
    // Listen for changes in the connection state.

    socket.connection.listen((state){
      print('state: "$state"');
    });

    // Listen for incoming messages.
    socket.messages.listen((message) {
      var openseaM=jsonDecode(message);
      print('message: --------${message}');
      openseaModel(Autogenerated.fromJson(openseaM));

    });
    isLoading(false);

  }

 Future<dynamic> fetchData() async {
    try {
      isLoading(true);
      Timer.periodic(Duration(seconds: 2), (timer)async {
        http.Response response = await http.get(Uri.parse('https://www.random.org/integers/?num=1&min=1&max=6&col=1&base=10&format=plain&rnd=new'),
            headers: {"Accept": "application/json"});
        if (response.statusCode == 200) {
          ///data successfully
          result( jsonDecode(response.body));
          print('-------$result');
      }
        else {
          print('error fetching data');
        }
      }
      );

    } catch (e) {
      print('Error while getting data is $e');
    } finally {
      isLoading(false);
    }
  }

}